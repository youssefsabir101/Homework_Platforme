generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ViewedHomework {
  userId     Int
  homeworkId Int
  homework   homework @relation("HomeworkViewedBy", fields: [homeworkId], references: [id])
  user       user     @relation("UserViewedHomeworks", fields: [userId], references: [id])

  @@id([userId, homeworkId])
  @@index([homeworkId])
  @@index([userId])
  @@map("viewed_homework")
}

model category {
  id       Int        @id @default(autoincrement())
  name     String     @unique(map: "Category_name_key")
  homework homework[]
}

model classroom {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  schoolId  Int
  school    school    @relation(fields: [schoolId], references: [id], map: "Classroom_schoolId_fkey")
  student   student[] @relation("studentclassrooms")
  teacher   teacher[] @relation("teacherclassrooms")
  user      user[]    @relation("userclassrooms")

  @@index([schoolId], map: "Classroom_schoolId_fkey")
}

model homework {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  dueDate     DateTime
  createdAt   DateTime         @default(now())
  updatedAt   DateTime
  teacherId   Int?
  fileName    String?
  fileType    String?
  fileUrl     String?
  fileBuffer  String?
  categoryId  Int?
  userId      Int?
  category    category?        @relation(fields: [categoryId], references: [id], map: "Homework_categoryId_fkey")
  teacher     teacher?         @relation(fields: [teacherId], references: [id], map: "Homework_teacherId_fkey")
  user        user?            @relation(fields: [userId], references: [id], map: "Homework_userId_fkey")
  submission  submission[]
  viewedBy    ViewedHomework[] @relation("HomeworkViewedBy")

  @@index([categoryId], map: "Homework_categoryId_fkey")
  @@index([teacherId], map: "Homework_teacherId_fkey")
  @@index([userId], map: "Homework_userId_fkey")
}

model school {
  id        Int         @id @default(autoincrement())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime
  classroom classroom[]
  student   student[]
  teacher   teacher[]
  user      user[]
}

model student {
  id         Int          @id @default(autoincrement())
  name       String
  loginCode  String?      @unique(map: "Student_loginCode_key")
  password   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  schoolId   Int?
  school     school?      @relation(fields: [schoolId], references: [id], map: "Student_schoolId_fkey")
  submission submission[]
  classroom  classroom[]  @relation("studentclassrooms")

  @@index([schoolId], map: "Student_schoolId_fkey")
}

model submission {
  id          Int      @id @default(autoincrement())
  content     String
  submittedAt DateTime @default(now())
  studentId   Int?
  homeworkId  Int
  fileName    String?
  fileType    String?
  fileUrl     String?
  answareText String?
  userId      Int?
  homework    homework @relation(fields: [homeworkId], references: [id], map: "Submission_homeworkId_fkey")
  student     student? @relation(fields: [studentId], references: [id], map: "Submission_studentId_fkey")
  user        user?    @relation(fields: [userId], references: [id], map: "Submission_userId_fkey")

  @@index([homeworkId], map: "Submission_homeworkId_fkey")
  @@index([studentId], map: "Submission_studentId_fkey")
  @@index([userId], map: "Submission_userId_fkey")
}

model teacher {
  id        Int         @id @default(autoincrement())
  name      String
  email     String?     @unique(map: "Teacher_email_key")
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime
  schoolId  Int?
  homework  homework[]
  school    school?     @relation(fields: [schoolId], references: [id], map: "Teacher_schoolId_fkey")
  classroom classroom[] @relation("teacherclassrooms")

  @@index([schoolId], map: "Teacher_schoolId_fkey")
}

model user {
  id         Int              @id @default(autoincrement())
  name       String
  email      String?          @unique(map: "User_email_key")
  loginCode  String?          @unique(map: "User_loginCode_key")
  password   String
  role       String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime
  schoolId   Int?
  homework   homework[]
  submission submission[]
  school     school?          @relation(fields: [schoolId], references: [id], map: "User_schoolId_fkey")
  viewed     ViewedHomework[] @relation("UserViewedHomeworks")
  classroom  classroom[]      @relation("userclassrooms")

  @@index([schoolId], map: "User_schoolId_fkey")
}
